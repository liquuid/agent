// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCliListParams creates a new CliListParams object
// with the default values initialized.
func NewCliListParams() CliListParams {
	var (
		limitDefault = int32(20)
	)
	return CliListParams{
		Limit: &limitDefault,
	}
}

// CliListParams contains all the bound params for the cli list operation
// typically these are obtained from a http.Request
//
// swagger:parameters cliList
type CliListParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	ContainersOnly *bool
	/*
	  In: query
	  Default: 20
	*/
	Limit *int32
	/*
	  In: query
	*/
	TemplatesOnly *bool
	/*
	  In: query
	*/
	WithAncestors *bool
	/*
	  In: query
	*/
	WithParents *bool
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *CliListParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qContainersOnly, qhkContainersOnly, _ := qs.GetOK("containersOnly")
	if err := o.bindContainersOnly(qContainersOnly, qhkContainersOnly, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qTemplatesOnly, qhkTemplatesOnly, _ := qs.GetOK("templatesOnly")
	if err := o.bindTemplatesOnly(qTemplatesOnly, qhkTemplatesOnly, route.Formats); err != nil {
		res = append(res, err)
	}

	qWithAncestors, qhkWithAncestors, _ := qs.GetOK("withAncestors")
	if err := o.bindWithAncestors(qWithAncestors, qhkWithAncestors, route.Formats); err != nil {
		res = append(res, err)
	}

	qWithParents, qhkWithParents, _ := qs.GetOK("withParents")
	if err := o.bindWithParents(qWithParents, qhkWithParents, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CliListParams) bindContainersOnly(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("containersOnly", "query", "bool", raw)
	}
	o.ContainersOnly = &value

	return nil
}

func (o *CliListParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		var limitDefault int32 = int32(20)
		o.Limit = &limitDefault
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int32", raw)
	}
	o.Limit = &value

	return nil
}

func (o *CliListParams) bindTemplatesOnly(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("templatesOnly", "query", "bool", raw)
	}
	o.TemplatesOnly = &value

	return nil
}

func (o *CliListParams) bindWithAncestors(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("withAncestors", "query", "bool", raw)
	}
	o.WithAncestors = &value

	return nil
}

func (o *CliListParams) bindWithParents(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("withParents", "query", "bool", raw)
	}
	o.WithParents = &value

	return nil
}
