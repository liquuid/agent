// Code generated by go-swagger; DO NOT EDIT.

package restore

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// RestoreHandlerFunc turns a function with the right signature into a restore handler
type RestoreHandlerFunc func(RestoreParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RestoreHandlerFunc) Handle(params RestoreParams) middleware.Responder {
	return fn(params)
}

// RestoreHandler interface for that can handle valid restore params
type RestoreHandler interface {
	Handle(RestoreParams) middleware.Responder
}

// NewRestore creates a new http.Handler for the restore operation
func NewRestore(ctx *middleware.Context, handler RestoreHandler) *Restore {
	return &Restore{Context: ctx, Handler: handler}
}

/*Restore swagger:route GET /rest/v1/restore/{container} restore restore

RestoreContainer restores a Subutai container to a snapshot at a specified timestamp if such a backup archive is available.

*/
type Restore struct {
	Context *middleware.Context
	Handler RestoreHandler
}

func (o *Restore) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRestoreParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
