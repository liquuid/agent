// Code generated by go-swagger; DO NOT EDIT.

package backup

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// BackupContainerHandlerFunc turns a function with the right signature into a backup container handler
type BackupContainerHandlerFunc func(BackupContainerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BackupContainerHandlerFunc) Handle(params BackupContainerParams) middleware.Responder {
	return fn(params)
}

// BackupContainerHandler interface for that can handle valid backup container params
type BackupContainerHandler interface {
	Handle(BackupContainerParams) middleware.Responder
}

// NewBackupContainer creates a new http.Handler for the backup container operation
func NewBackupContainer(ctx *middleware.Context, handler BackupContainerHandler) *BackupContainer {
	return &BackupContainer{Context: ctx, Handler: handler}
}

/*BackupContainer swagger:route GET /backup/{name} backup backupContainer

BackupContainer takes a snapshots of each container's volume and stores it in the `/mnt/backups/container_name/datetime/` directory. A full backup creates a delta-file of each BTRFS subvolume. An incremental backup (default) creates a delta-file with the difference of changes between the current and last snapshots. All deltas are compressed to archives in `/mnt/backups/` directory (container_datetime.tar.gz or container_datetime_Full.tar.gz for full backup). A changelog file can be found next to backups archive (container_datetime_changelog.txt or container_datetime_Full_changelog.txt) which contains a list of changes made between two backups.

*/
type BackupContainer struct {
	Context *middleware.Context
	Handler BackupContainerHandler
}

func (o *BackupContainer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewBackupContainerParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
