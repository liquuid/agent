// Code generated by go-swagger; DO NOT EDIT.

package hostname

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// HostnameHandlerFunc turns a function with the right signature into a hostname handler
type HostnameHandlerFunc func(HostnameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn HostnameHandlerFunc) Handle(params HostnameParams) middleware.Responder {
	return fn(params)
}

// HostnameHandler interface for that can handle valid hostname params
type HostnameHandler interface {
	Handle(HostnameParams) middleware.Responder
}

// NewHostname creates a new http.Handler for the hostname operation
func NewHostname(ctx *middleware.Context, handler HostnameHandler) *Hostname {
	return &Hostname{Context: ctx, Handler: handler}
}

/*Hostname swagger:route POST /hostname/{container}/{name} hostname hostname

  - type: string name: container in: path required: true

*/
type Hostname struct {
	Context *middleware.Context
	Handler HostnameHandler
}

func (o *Hostname) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewHostnameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
