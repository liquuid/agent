// Code generated by go-swagger; DO NOT EDIT.

package vxlan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// VxlanListHandlerFunc turns a function with the right signature into a vxlan list handler
type VxlanListHandlerFunc func(VxlanListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn VxlanListHandlerFunc) Handle(params VxlanListParams) middleware.Responder {
	return fn(params)
}

// VxlanListHandler interface for that can handle valid vxlan list params
type VxlanListHandler interface {
	Handle(VxlanListParams) middleware.Responder
}

// NewVxlanList creates a new http.Handler for the vxlan list operation
func NewVxlanList(ctx *middleware.Context, handler VxlanListHandler) *VxlanList {
	return &VxlanList{Context: ctx, Handler: handler}
}

/*VxlanList swagger:route GET /vxlan/list vxlan vxlanList

prints a list of existing VXLAN tunnels

*/
type VxlanList struct {
	Context *middleware.Context
	Handler VxlanListHandler
}

func (o *VxlanList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewVxlanListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
