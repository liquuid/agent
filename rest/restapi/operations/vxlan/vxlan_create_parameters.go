// Code generated by go-swagger; DO NOT EDIT.

package vxlan

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewVxlanCreateParams creates a new VxlanCreateParams object
// with the default values initialized.
func NewVxlanCreateParams() VxlanCreateParams {
	var ()
	return VxlanCreateParams{}
}

// VxlanCreateParams contains all the bound params for the vxlan create operation
// typically these are obtained from a http.Request
//
// swagger:parameters vxlanCreate
type VxlanCreateParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Remote IP
	  Required: true
	  In: query
	*/
	Remoteip string
	/*Tunnel name
	  Required: true
	  In: path
	*/
	Tunnel string
	/*Virtual local network
	  Required: true
	  In: query
	*/
	Vlan string
	/*Virtual Network Interface
	  Required: true
	  In: query
	*/
	Vni string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *VxlanCreateParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qRemoteip, qhkRemoteip, _ := qs.GetOK("remoteip")
	if err := o.bindRemoteip(qRemoteip, qhkRemoteip, route.Formats); err != nil {
		res = append(res, err)
	}

	rTunnel, rhkTunnel, _ := route.Params.GetOK("tunnel")
	if err := o.bindTunnel(rTunnel, rhkTunnel, route.Formats); err != nil {
		res = append(res, err)
	}

	qVlan, qhkVlan, _ := qs.GetOK("vlan")
	if err := o.bindVlan(qVlan, qhkVlan, route.Formats); err != nil {
		res = append(res, err)
	}

	qVni, qhkVni, _ := qs.GetOK("vni")
	if err := o.bindVni(qVni, qhkVni, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *VxlanCreateParams) bindRemoteip(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("remoteip", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("remoteip", "query", raw); err != nil {
		return err
	}

	o.Remoteip = raw

	return nil
}

func (o *VxlanCreateParams) bindTunnel(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.Tunnel = raw

	return nil
}

func (o *VxlanCreateParams) bindVlan(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("vlan", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("vlan", "query", raw); err != nil {
		return err
	}

	o.Vlan = raw

	return nil
}

func (o *VxlanCreateParams) bindVni(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("vni", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("vni", "query", raw); err != nil {
		return err
	}

	o.Vni = raw

	return nil
}
