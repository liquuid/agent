// Code generated by go-swagger; DO NOT EDIT.

package start

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// StartHandlerFunc turns a function with the right signature into a start handler
type StartHandlerFunc func(StartParams) middleware.Responder

// Handle executing the request and returning a response
func (fn StartHandlerFunc) Handle(params StartParams) middleware.Responder {
	return fn(params)
}

// StartHandler interface for that can handle valid start params
type StartHandler interface {
	Handle(StartParams) middleware.Responder
}

// NewStart creates a new http.Handler for the start operation
func NewStart(ctx *middleware.Context, handler StartHandler) *Start {
	return &Start{Context: ctx, Handler: handler}
}

/*Start swagger:route GET /start/{container} start start

Starts a Subutai container and checks if container state changed to "running" or "starting". If state is not changing for 60 seconds, then the "start" operation is considered to have failed.

*/
type Start struct {
	Context *middleware.Context
	Handler StartHandler
}

func (o *Start) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewStartParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
