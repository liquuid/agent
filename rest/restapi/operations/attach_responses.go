// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/subutai-io/agent/rest/models"
)

// AttachOKCode is the HTTP code returned for type AttachOK
const AttachOKCode int = 200

/*AttachOK Ok

swagger:response attachOK
*/
type AttachOK struct {

	/*
	  In: Body
	*/
	Payload models.AttachOKBody `json:"body,omitempty"`
}

// NewAttachOK creates AttachOK with default headers values
func NewAttachOK() *AttachOK {
	return &AttachOK{}
}

// WithPayload adds the payload to the attach o k response
func (o *AttachOK) WithPayload(payload models.AttachOKBody) *AttachOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the attach o k response
func (o *AttachOK) SetPayload(payload models.AttachOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AttachOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make(models.AttachOKBody, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*AttachDefault generic error response

swagger:response attachDefault
*/
type AttachDefault struct {
	_statusCode int
}

// NewAttachDefault creates AttachDefault with default headers values
func NewAttachDefault(code int) *AttachDefault {
	if code <= 0 {
		code = 500
	}

	return &AttachDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the attach default response
func (o *AttachDefault) WithStatusCode(code int) *AttachDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the attach default response
func (o *AttachDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WriteResponse to the client
func (o *AttachDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(o._statusCode)
}
