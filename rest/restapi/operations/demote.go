// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DemoteHandlerFunc turns a function with the right signature into a demote handler
type DemoteHandlerFunc func(DemoteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DemoteHandlerFunc) Handle(params DemoteParams) middleware.Responder {
	return fn(params)
}

// DemoteHandler interface for that can handle valid demote params
type DemoteHandler interface {
	Handle(DemoteParams) middleware.Responder
}

// NewDemote creates a new http.Handler for the demote operation
func NewDemote(ctx *middleware.Context, handler DemoteHandler) *Demote {
	return &Demote{Context: ctx, Handler: handler}
}

/*Demote swagger:route POST /rest/v1/demote/{container} agent cli container demote

Converts template into regular Subutai container.
A Subutai template is a "locked down" container only to be used for cloning purposes. It cannot be started, and its file system cannot be modified: it's read-only. Normal operational containers are promoted into templates, but sometimes you might want to demote them back to regular containers. This is what the demote sub command does: it reverts a template without children back into a normal container. Demoted container will use NAT network interface and dynamic IP address if opposite options are not specified.

*/
type Demote struct {
	Context *middleware.Context
	Handler DemoteHandler
}

func (o *Demote) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDemoteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
