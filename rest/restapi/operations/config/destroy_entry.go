// Code generated by go-swagger; DO NOT EDIT.

package config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DestroyEntryHandlerFunc turns a function with the right signature into a destroy entry handler
type DestroyEntryHandlerFunc func(DestroyEntryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DestroyEntryHandlerFunc) Handle(params DestroyEntryParams) middleware.Responder {
	return fn(params)
}

// DestroyEntryHandler interface for that can handle valid destroy entry params
type DestroyEntryHandler interface {
	Handle(DestroyEntryParams) middleware.Responder
}

// NewDestroyEntry creates a new http.Handler for the destroy entry operation
func NewDestroyEntry(ctx *middleware.Context, handler DestroyEntryHandler) *DestroyEntry {
	return &DestroyEntry{Context: ctx, Handler: handler}
}

/*DestroyEntry swagger:route DELETE /config config destroyEntry

Delete entry in configuration file

*/
type DestroyEntry struct {
	Context *middleware.Context
	Handler DestroyEntryHandler
}

func (o *DestroyEntry) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDestroyEntryParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
