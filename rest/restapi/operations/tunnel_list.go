// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// TunnelListHandlerFunc turns a function with the right signature into a tunnel list handler
type TunnelListHandlerFunc func(TunnelListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TunnelListHandlerFunc) Handle(params TunnelListParams) middleware.Responder {
	return fn(params)
}

// TunnelListHandler interface for that can handle valid tunnel list params
type TunnelListHandler interface {
	Handle(TunnelListParams) middleware.Responder
}

// NewTunnelList creates a new http.Handler for the tunnel list operation
func NewTunnelList(ctx *middleware.Context, handler TunnelListHandler) *TunnelList {
	return &TunnelList{Context: ctx, Handler: handler}
}

/*TunnelList swagger:route GET /rest/v1/tunnel/list agent cli list tunnelList

performs tunnel check and shows "alive" tunnels

*/
type TunnelList struct {
	Context *middleware.Context
	Handler TunnelListHandler
}

func (o *TunnelList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTunnelListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
