// Code generated by go-swagger; DO NOT EDIT.

package proxy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ProxyDeleteHandlerFunc turns a function with the right signature into a proxy delete handler
type ProxyDeleteHandlerFunc func(ProxyDeleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ProxyDeleteHandlerFunc) Handle(params ProxyDeleteParams) middleware.Responder {
	return fn(params)
}

// ProxyDeleteHandler interface for that can handle valid proxy delete params
type ProxyDeleteHandler interface {
	Handle(ProxyDeleteParams) middleware.Responder
}

// NewProxyDelete creates a new http.Handler for the proxy delete operation
func NewProxyDelete(ctx *middleware.Context, handler ProxyDeleteHandler) *ProxyDelete {
	return &ProxyDelete{Context: ctx, Handler: handler}
}

/*ProxyDelete swagger:route DELETE /rest/v1/proxy proxy proxyDelete

ProxyDel checks what need to be removed - domain or node and pass args to required functions

*/
type ProxyDelete struct {
	Context *middleware.Context
	Handler ProxyDeleteHandler
}

func (o *ProxyDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewProxyDeleteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
