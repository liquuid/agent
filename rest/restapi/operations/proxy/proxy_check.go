// Code generated by go-swagger; DO NOT EDIT.

package proxy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ProxyCheckHandlerFunc turns a function with the right signature into a proxy check handler
type ProxyCheckHandlerFunc func(ProxyCheckParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ProxyCheckHandlerFunc) Handle(params ProxyCheckParams) middleware.Responder {
	return fn(params)
}

// ProxyCheckHandler interface for that can handle valid proxy check params
type ProxyCheckHandler interface {
	Handle(ProxyCheckParams) middleware.Responder
}

// NewProxyCheck creates a new http.Handler for the proxy check operation
func NewProxyCheck(ctx *middleware.Context, handler ProxyCheckHandler) *ProxyCheck {
	return &ProxyCheck{Context: ctx, Handler: handler}
}

/*ProxyCheck swagger:route GET /proxy proxy proxyCheck

ProxyCheck exits with 0 code if domain or node is exists in specified vlan, otherwise exitcode is 1

*/
type ProxyCheck struct {
	Context *middleware.Context
	Handler ProxyCheckHandler
}

func (o *ProxyCheck) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewProxyCheckParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
