// Code generated by go-swagger; DO NOT EDIT.

package clone

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/subutai-io/agent/rest/models"
)

// NewCloneParams creates a new CloneParams object
// with the default values initialized.
func NewCloneParams() CloneParams {
	var ()
	return CloneParams{}
}

// CloneParams contains all the bound params for the clone operation
// typically these are obtained from a http.Request
//
// swagger:parameters clone
type CloneParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: body
	*/
	Body *models.Cloneargs
	/*Child name
	  Required: true
	  In: path
	*/
	Child string
	/*Parent name
	  Required: true
	  In: path
	*/
	Parent string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *CloneParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.Cloneargs
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			res = append(res, errors.NewParseError("body", "body", "", err))
		} else {
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Body = &body
			}
		}

	}

	rChild, rhkChild, _ := route.Params.GetOK("child")
	if err := o.bindChild(rChild, rhkChild, route.Formats); err != nil {
		res = append(res, err)
	}

	rParent, rhkParent, _ := route.Params.GetOK("parent")
	if err := o.bindParent(rParent, rhkParent, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CloneParams) bindChild(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.Child = raw

	return nil
}

func (o *CloneParams) bindParent(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.Parent = raw

	return nil
}
