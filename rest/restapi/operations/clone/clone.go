// Code generated by go-swagger; DO NOT EDIT.

package clone

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CloneHandlerFunc turns a function with the right signature into a clone handler
type CloneHandlerFunc func(CloneParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CloneHandlerFunc) Handle(params CloneParams) middleware.Responder {
	return fn(params)
}

// CloneHandler interface for that can handle valid clone params
type CloneHandler interface {
	Handle(CloneParams) middleware.Responder
}

// NewClone creates a new http.Handler for the clone operation
func NewClone(ctx *middleware.Context, handler CloneHandler) *Clone {
	return &Clone{Context: ctx, Handler: handler}
}

/*Clone swagger:route POST /clone/{parent}/{child} clone clone

Clone function creates new `child` container from a Subutai `parent` template. If the specified template argument is not deployed in system, Subutai first tries to import it, and if import succeeds, it then continues to clone from the imported template image. By default, clone will use the NAT-ed network interface with IP address received from the Subutai DHCP server, but this behavior can be changed with command options described below.
If `ipaddr` option is defined, separate bridge interface will be created in specified VLAN and new container will receive static IP address. Option `envID` writes the environment ID string inside new container. Option `token` is intended to check the origin of new container creation request during environment build. This is one of the security checks which makes sure that each container creation request is authorized by registered user.
Option `kurjunToken` set kurjun token to clone private and shared templates
The clone options are not intended for manual use: unless you're confident about what you're doing. Use default clone format without additional options to create Subutai containers.

*/
type Clone struct {
	Context *middleware.Context
	Handler CloneHandler
}

func (o *Clone) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCloneParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
