// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// P2pPostHandlerFunc turns a function with the right signature into a p2p post handler
type P2pPostHandlerFunc func(P2pPostParams) middleware.Responder

// Handle executing the request and returning a response
func (fn P2pPostHandlerFunc) Handle(params P2pPostParams) middleware.Responder {
	return fn(params)
}

// P2pPostHandler interface for that can handle valid p2p post params
type P2pPostHandler interface {
	Handle(P2pPostParams) middleware.Responder
}

// NewP2pPost creates a new http.Handler for the p2p post operation
func NewP2pPost(ctx *middleware.Context, handler P2pPostHandler) *P2pPost {
	return &P2pPost{Context: ctx, Handler: handler}
}

/*P2pPost swagger:route POST /rest/v1/p2p agent cli list p2pPost

P2P function controls and configures the peer-to-peer network structure: the swarm which includes all hosts with same the same swarm hash and secret key.
P2P is a base layer for Subutai environment networking: all containers in same environment are connected to each other via VXLAN tunnels and are accesses as if they were in one LAN. It doesn't matter where the containers are physically located.

*/
type P2pPost struct {
	Context *middleware.Context
	Handler P2pPostHandler
}

func (o *P2pPost) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewP2pPostParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
