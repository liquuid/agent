// Code generated by go-swagger; DO NOT EDIT.

package p2p

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/subutai-io/agent/rest/models"
)

// P2pUpdateOKCode is the HTTP code returned for type P2pUpdateOK
const P2pUpdateOKCode int = 200

/*P2pUpdateOK Ok

swagger:response p2pUpdateOK
*/
type P2pUpdateOK struct {

	/*
	  In: Body
	*/
	Payload models.P2pUpdateOKBody `json:"body,omitempty"`
}

// NewP2pUpdateOK creates P2pUpdateOK with default headers values
func NewP2pUpdateOK() *P2pUpdateOK {
	return &P2pUpdateOK{}
}

// WithPayload adds the payload to the p2p update o k response
func (o *P2pUpdateOK) WithPayload(payload models.P2pUpdateOKBody) *P2pUpdateOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the p2p update o k response
func (o *P2pUpdateOK) SetPayload(payload models.P2pUpdateOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *P2pUpdateOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make(models.P2pUpdateOKBody, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*P2pUpdateDefault generic error response

swagger:response p2pUpdateDefault
*/
type P2pUpdateDefault struct {
	_statusCode int
}

// NewP2pUpdateDefault creates P2pUpdateDefault with default headers values
func NewP2pUpdateDefault(code int) *P2pUpdateDefault {
	if code <= 0 {
		code = 500
	}

	return &P2pUpdateDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the p2p update default response
func (o *P2pUpdateDefault) WithStatusCode(code int) *P2pUpdateDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the p2p update default response
func (o *P2pUpdateDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WriteResponse to the client
func (o *P2pUpdateDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(o._statusCode)
}
