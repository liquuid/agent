// Code generated by go-swagger; DO NOT EDIT.

package p2p

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// P2pDeleteHandlerFunc turns a function with the right signature into a p2p delete handler
type P2pDeleteHandlerFunc func(P2pDeleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn P2pDeleteHandlerFunc) Handle(params P2pDeleteParams) middleware.Responder {
	return fn(params)
}

// P2pDeleteHandler interface for that can handle valid p2p delete params
type P2pDeleteHandler interface {
	Handle(P2pDeleteParams) middleware.Responder
}

// NewP2pDelete creates a new http.Handler for the p2p delete operation
func NewP2pDelete(ctx *middleware.Context, handler P2pDeleteHandler) *P2pDelete {
	return &P2pDelete{Context: ctx, Handler: handler}
}

/*P2pDelete swagger:route DELETE /p2p p2p p2pDelete

P2P function controls and configures the peer-to-peer network structure: the swarm which includes all hosts with same the same swarm hash and secret key.
P2P is a base layer for Subutai environment networking: all containers in same environment are connected to each other via VXLAN tunnels and are accesses as if they were in one LAN. It doesn't matter where the containers are physically located.

*/
type P2pDelete struct {
	Context *middleware.Context
	Handler P2pDeleteHandler
}

func (o *P2pDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewP2pDeleteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
