// Code generated by go-swagger; DO NOT EDIT.

package p2p

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// P2pListHandlerFunc turns a function with the right signature into a p2p list handler
type P2pListHandlerFunc func(P2pListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn P2pListHandlerFunc) Handle(params P2pListParams) middleware.Responder {
	return fn(params)
}

// P2pListHandler interface for that can handle valid p2p list params
type P2pListHandler interface {
	Handle(P2pListParams) middleware.Responder
}

// NewP2pList creates a new http.Handler for the p2p list operation
func NewP2pList(ctx *middleware.Context, handler P2pListHandler) *P2pList {
	return &P2pList{Context: ctx, Handler: handler}
}

/*P2pList swagger:route GET /p2p p2p p2pList

P2P function controls and configures the peer-to-peer network structure: the swarm which includes all hosts with same the same swarm hash and secret key.
P2P is a base layer for Subutai environment networking: all containers in same environment are connected to each other via VXLAN tunnels and are accesses as if they were in one LAN. It doesn't matter where the containers are physically located.

*/
type P2pList struct {
	Context *middleware.Context
	Handler P2pListHandler
}

func (o *P2pList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewP2pListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
