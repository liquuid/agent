// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"agent/rest/models"
)

// CliListOKCode is the HTTP code returned for type CliListOK
const CliListOKCode int = 200

/*CliListOK List all subutai instances

swagger:response cliListOK
*/
type CliListOK struct {

	/*
	  In: Body
	*/
	Payload models.CliListOKBody `json:"body,omitempty"`
}

// NewCliListOK creates CliListOK with default headers values
func NewCliListOK() *CliListOK {
	return &CliListOK{}
}

// WithPayload adds the payload to the cli list o k response
func (o *CliListOK) WithPayload(payload models.CliListOKBody) *CliListOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the cli list o k response
func (o *CliListOK) SetPayload(payload models.CliListOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CliListOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make(models.CliListOKBody, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*CliListDefault generic error response

swagger:response cliListDefault
*/
type CliListDefault struct {
	_statusCode int
}

// NewCliListDefault creates CliListDefault with default headers values
func NewCliListDefault(code int) *CliListDefault {
	if code <= 0 {
		code = 500
	}

	return &CliListDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the cli list default response
func (o *CliListDefault) WithStatusCode(code int) *CliListDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the cli list default response
func (o *CliListDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WriteResponse to the client
func (o *CliListDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(o._statusCode)
}
