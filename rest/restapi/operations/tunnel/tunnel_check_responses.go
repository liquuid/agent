// Code generated by go-swagger; DO NOT EDIT.

package tunnel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/subutai-io/agent/rest/models"
)

// TunnelCheckOKCode is the HTTP code returned for type TunnelCheckOK
const TunnelCheckOKCode int = 200

/*TunnelCheckOK Ok

swagger:response tunnelCheckOK
*/
type TunnelCheckOK struct {

	/*
	  In: Body
	*/
	Payload models.TunnelCheckOKBody `json:"body,omitempty"`
}

// NewTunnelCheckOK creates TunnelCheckOK with default headers values
func NewTunnelCheckOK() *TunnelCheckOK {
	return &TunnelCheckOK{}
}

// WithPayload adds the payload to the tunnel check o k response
func (o *TunnelCheckOK) WithPayload(payload models.TunnelCheckOKBody) *TunnelCheckOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the tunnel check o k response
func (o *TunnelCheckOK) SetPayload(payload models.TunnelCheckOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TunnelCheckOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make(models.TunnelCheckOKBody, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*TunnelCheckDefault generic error response

swagger:response tunnelCheckDefault
*/
type TunnelCheckDefault struct {
	_statusCode int
}

// NewTunnelCheckDefault creates TunnelCheckDefault with default headers values
func NewTunnelCheckDefault(code int) *TunnelCheckDefault {
	if code <= 0 {
		code = 500
	}

	return &TunnelCheckDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the tunnel check default response
func (o *TunnelCheckDefault) WithStatusCode(code int) *TunnelCheckDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the tunnel check default response
func (o *TunnelCheckDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WriteResponse to the client
func (o *TunnelCheckDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(o._statusCode)
}
