// Code generated by go-swagger; DO NOT EDIT.

package tunnel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// TunnelCheckHandlerFunc turns a function with the right signature into a tunnel check handler
type TunnelCheckHandlerFunc func(TunnelCheckParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TunnelCheckHandlerFunc) Handle(params TunnelCheckParams) middleware.Responder {
	return fn(params)
}

// TunnelCheckHandler interface for that can handle valid tunnel check params
type TunnelCheckHandler interface {
	Handle(TunnelCheckParams) middleware.Responder
}

// NewTunnelCheck creates a new http.Handler for the tunnel check operation
func NewTunnelCheck(ctx *middleware.Context, handler TunnelCheckHandler) *TunnelCheck {
	return &TunnelCheck{Context: ctx, Handler: handler}
}

/*TunnelCheck swagger:route GET /tunnel/check tunnel tunnelCheck

reads list, checks tunnel ttl, its state and then adds or removes required tunnels

*/
type TunnelCheck struct {
	Context *middleware.Context
	Handler TunnelCheckHandler
}

func (o *TunnelCheck) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewTunnelCheckParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
