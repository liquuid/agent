// Code generated by go-swagger; DO NOT EDIT.

package metrics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// MetricsHandlerFunc turns a function with the right signature into a metrics handler
type MetricsHandlerFunc func(MetricsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn MetricsHandlerFunc) Handle(params MetricsParams) middleware.Responder {
	return fn(params)
}

// MetricsHandler interface for that can handle valid metrics params
type MetricsHandler interface {
	Handle(MetricsParams) middleware.Responder
}

// NewMetrics creates a new http.Handler for the metrics operation
func NewMetrics(ctx *middleware.Context, handler MetricsHandler) *Metrics {
	return &Metrics{Context: ctx, Handler: handler}
}

/*Metrics swagger:route GET /metrics metrics metrics

HostMetrics function retrieves monitoring data from a time-series database deployed in the SS Management server for container hosts and Resource Hosts. Statistics are being collected by the Subutai daemon and includes common information like CPU utilization, network load, RAM and disk usage for both containers and hosts. Since the database is located on the SS Management Host, hosts which are not a part of a Subutai peer have no access to this information. Data aggregation in the time-series database has following configuration: last hour statistic is stored "as is", last day data aggregates to 1 minute interval, last week is in 5 minute intervals, After 7 days all statistics is are overwritten by new incoming data.

*/
type Metrics struct {
	Context *middleware.Context
	Handler MetricsHandler
}

func (o *Metrics) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewMetricsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
