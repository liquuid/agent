// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// QuotaHandlerFunc turns a function with the right signature into a quota handler
type QuotaHandlerFunc func(QuotaParams) middleware.Responder

// Handle executing the request and returning a response
func (fn QuotaHandlerFunc) Handle(params QuotaParams) middleware.Responder {
	return fn(params)
}

// QuotaHandler interface for that can handle valid quota params
type QuotaHandler interface {
	Handle(QuotaParams) middleware.Responder
}

// NewQuota creates a new http.Handler for the quota operation
func NewQuota(ctx *middleware.Context, handler QuotaHandler) *Quota {
	return &Quota{Context: ctx, Handler: handler}
}

/*Quota swagger:route GET /rest/v1/quota agent cli list quota

Quota function controls container's quotas and thresholds. Available resources: cpu, % cpuset, available cores ram, Mb network, Kbps rootfs/home/var/opt, Gb The threshold value represents a percentage for each resource. Once resource consumption exceeds this threshold it triggers an alert. The clone operation, sets no quotas and thresholds for new containers; quotas need to be configured with quota command after a clone operation.

*/
type Quota struct {
	Context *middleware.Context
	Handler QuotaHandler
}

func (o *Quota) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewQuotaParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
