// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/subutai-io/agent/rest/models"
)

// ConfigOKCode is the HTTP code returned for type ConfigOK
const ConfigOKCode int = 200

/*ConfigOK OK

swagger:response configOK
*/
type ConfigOK struct {

	/*
	  In: Body
	*/
	Payload *models.Message `json:"body,omitempty"`
}

// NewConfigOK creates ConfigOK with default headers values
func NewConfigOK() *ConfigOK {
	return &ConfigOK{}
}

// WithPayload adds the payload to the config o k response
func (o *ConfigOK) WithPayload(payload *models.Message) *ConfigOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the config o k response
func (o *ConfigOK) SetPayload(payload *models.Message) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ConfigOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ConfigDefault error

swagger:response configDefault
*/
type ConfigDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewConfigDefault creates ConfigDefault with default headers values
func NewConfigDefault(code int) *ConfigDefault {
	if code <= 0 {
		code = 500
	}

	return &ConfigDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the config default response
func (o *ConfigDefault) WithStatusCode(code int) *ConfigDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the config default response
func (o *ConfigDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the config default response
func (o *ConfigDefault) WithPayload(payload *models.Error) *ConfigDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the config default response
func (o *ConfigDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ConfigDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
