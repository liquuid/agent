// Code generated by go-swagger; DO NOT EDIT.

package stop

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// StopHandlerFunc turns a function with the right signature into a stop handler
type StopHandlerFunc func(StopParams) middleware.Responder

// Handle executing the request and returning a response
func (fn StopHandlerFunc) Handle(params StopParams) middleware.Responder {
	return fn(params)
}

// StopHandler interface for that can handle valid stop params
type StopHandler interface {
	Handle(StopParams) middleware.Responder
}

// NewStop creates a new http.Handler for the stop operation
func NewStop(ctx *middleware.Context, handler StopHandler) *Stop {
	return &Stop{Context: ctx, Handler: handler}
}

/*Stop swagger:route GET /stop/{container} stop stop

Stops a Subutai container with an additional state check.

*/
type Stop struct {
	Context *middleware.Context
	Handler StopHandler
}

func (o *Stop) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewStopParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
