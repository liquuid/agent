// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ProxyCreateHandlerFunc turns a function with the right signature into a proxy create handler
type ProxyCreateHandlerFunc func(ProxyCreateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ProxyCreateHandlerFunc) Handle(params ProxyCreateParams) middleware.Responder {
	return fn(params)
}

// ProxyCreateHandler interface for that can handle valid proxy create params
type ProxyCreateHandler interface {
	Handle(ProxyCreateParams) middleware.Responder
}

// NewProxyCreate creates a new http.Handler for the proxy create operation
func NewProxyCreate(ctx *middleware.Context, handler ProxyCreateHandler) *ProxyCreate {
	return &ProxyCreate{Context: ctx, Handler: handler}
}

/*ProxyCreate swagger:route POST /rest/v1/proxy agent cli list proxyCreate

ProxyAdd checks input args and perform required operations to configure reverse proxy

*/
type ProxyCreate struct {
	Context *middleware.Context
	Handler ProxyCreateHandler
}

func (o *ProxyCreate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewProxyCreateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
