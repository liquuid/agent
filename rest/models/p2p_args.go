// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// P2pArgs p2p args
// swagger:model p2pArgs
type P2pArgs struct {

	// hash
	// Required: true
	// Read Only: true
	Hash string `json:"hash"`

	// interface name
	// Required: true
	// Read Only: true
	InterfaceName string `json:"interfaceName"`

	// key
	// Required: true
	// Read Only: true
	Key string `json:"key"`

	// local peep IP addr
	// Read Only: true
	LocalPeepIPAddr string `json:"localPeepIPAddr,omitempty"`

	// port range
	// Read Only: true
	PortRange string `json:"portRange,omitempty"`

	// ttl
	// Required: true
	// Read Only: true
	TTL string `json:"ttl"`
}

// Validate validates this p2p args
func (m *P2pArgs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHash(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInterfaceName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTTL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *P2pArgs) validateHash(formats strfmt.Registry) error {

	if err := validate.RequiredString("hash", "body", string(m.Hash)); err != nil {
		return err
	}

	return nil
}

func (m *P2pArgs) validateInterfaceName(formats strfmt.Registry) error {

	if err := validate.RequiredString("interfaceName", "body", string(m.InterfaceName)); err != nil {
		return err
	}

	return nil
}

func (m *P2pArgs) validateKey(formats strfmt.Registry) error {

	if err := validate.RequiredString("key", "body", string(m.Key)); err != nil {
		return err
	}

	return nil
}

func (m *P2pArgs) validateTTL(formats strfmt.Registry) error {

	if err := validate.RequiredString("ttl", "body", string(m.TTL)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *P2pArgs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *P2pArgs) UnmarshalBinary(b []byte) error {
	var res P2pArgs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
