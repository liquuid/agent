// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuotaArgs quota args
// swagger:model quotaArgs
type QuotaArgs struct {

	// name
	// Required: true
	// Read Only: true
	Name string `json:"name"`

	// resource
	// Required: true
	// Min Length: 1
	Resource *string `json:"resource"`

	// size
	// Min Length: 1
	Size string `json:"size,omitempty"`

	// threshold
	// Min Length: 1
	Threshold string `json:"threshold,omitempty"`
}

// Validate validates this quota args
func (m *QuotaArgs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateThreshold(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuotaArgs) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *QuotaArgs) validateResource(formats strfmt.Registry) error {

	if err := validate.Required("resource", "body", m.Resource); err != nil {
		return err
	}

	if err := validate.MinLength("resource", "body", string(*m.Resource), 1); err != nil {
		return err
	}

	return nil
}

func (m *QuotaArgs) validateSize(formats strfmt.Registry) error {

	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if err := validate.MinLength("size", "body", string(m.Size), 1); err != nil {
		return err
	}

	return nil
}

func (m *QuotaArgs) validateThreshold(formats strfmt.Registry) error {

	if swag.IsZero(m.Threshold) { // not required
		return nil
	}

	if err := validate.MinLength("threshold", "body", string(m.Threshold), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuotaArgs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuotaArgs) UnmarshalBinary(b []byte) error {
	var res QuotaArgs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
